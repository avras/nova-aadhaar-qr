use bellpepper::gadgets::multipack::bytes_to_bits;
use bellpepper_core::{boolean::Boolean, ConstraintSystem};
use bellpepper_nonnative::util::bit::{Bit, Bitvector};
use ff::PrimeFieldBits;

use crate::sha256::{SHA256_DIGEST_LENGTH_BITS, SHA256_DIGEST_LENGTH_BYTES};

pub(crate) const BIGNAT_LIMB_WIDTH: usize = 32;
pub const BIGNAT_NUM_LIMBS: usize = 64;
// const RSA_MODULUS_LENGTH_BITS: usize = 2048;
pub(crate) const RSA_MODULUS_LENGTH_BYTES: usize = 256;
pub(crate) const RSA_MODULUS_HEX_BYTES: [u8; RSA_MODULUS_LENGTH_BYTES] = [
    0xa2, 0x72, 0x2c, 0x0e, 0x5f, 0x2d, 0xe5, 0xba, 0x70, 0x7e, 0xd9, 0x3f, 0x03, 0x6e, 0xc2, 0xb1,
    0xf0, 0xb9, 0x55, 0x93, 0x23, 0x90, 0xfa, 0xcc, 0x0f, 0x0b, 0xcb, 0xf2, 0x0c, 0x80, 0xa1, 0x5c,
    0x08, 0x8b, 0x48, 0x86, 0x86, 0x6b, 0x72, 0xeb, 0x25, 0xab, 0x0b, 0xf5, 0x5a, 0x2f, 0xe0, 0x6b,
    0x69, 0xed, 0xbd, 0x5c, 0xc8, 0x3b, 0x74, 0xc7, 0x70, 0x9d, 0xb2, 0x14, 0x1e, 0x6c, 0x07, 0xc6,
    0x8b, 0xcd, 0xf8, 0x59, 0xd3, 0xda, 0xf7, 0xf3, 0xfc, 0xed, 0x24, 0x1d, 0x07, 0x20, 0x55, 0xdc,
    0x15, 0x48, 0x84, 0x74, 0xb4, 0x5c, 0x2c, 0x98, 0x2f, 0xa9, 0x54, 0xaa, 0x52, 0xaa, 0x6f, 0xff,
    0xb2, 0x48, 0x18, 0x61, 0xc6, 0x50, 0x85, 0xd8, 0x4b, 0x64, 0x15, 0x8e, 0x9f, 0x43, 0xd9, 0xf3,
    0x5c, 0xa6, 0x9b, 0x48, 0xce, 0x93, 0x00, 0x52, 0x21, 0x02, 0xa4, 0xca, 0xe0, 0x93, 0xbf, 0xfd,
    0x47, 0x4b, 0x08, 0xd3, 0x2d, 0x1d, 0x04, 0x06, 0xf6, 0x87, 0xf7, 0xe5, 0x5b, 0xd2, 0x26, 0xa2,
    0x38, 0x4b, 0xf5, 0x8a, 0x41, 0xc3, 0x84, 0xc3, 0x97, 0x4f, 0x1c, 0x7c, 0x51, 0x15, 0x81, 0x9c,
    0x92, 0x6d, 0xe3, 0xad, 0xf3, 0xec, 0xbb, 0x99, 0x04, 0xc4, 0x86, 0xf1, 0xf5, 0xd5, 0x30, 0x39,
    0x77, 0xbe, 0xa6, 0x35, 0x84, 0x36, 0x73, 0x29, 0xb5, 0xc1, 0x68, 0xaf, 0xdc, 0x95, 0x12, 0x17,
    0x31, 0xf7, 0xf4, 0x8d, 0x43, 0xaf, 0x7c, 0xf3, 0x1f, 0x69, 0xb1, 0xe3, 0xbb, 0xe7, 0x94, 0x9d,
    0xc7, 0xa8, 0xb1, 0x0c, 0x0b, 0xdd, 0xeb, 0xab, 0xab, 0xde, 0xbe, 0xa0, 0x76, 0xa1, 0xcf, 0x81,
    0x66, 0xad, 0xf0, 0x6a, 0x8a, 0x41, 0xde, 0xdf, 0x14, 0x3b, 0xff, 0x83, 0x5d, 0xbd, 0x2b, 0xd5,
    0xbb, 0x0b, 0x61, 0xd2, 0x47, 0x2c, 0x23, 0x4a, 0x6d, 0x44, 0x11, 0xbc, 0x9b, 0x53, 0x60, 0x95,
];

const SHA256_DER_ENCODING_LENGTH_BYTES: usize = 19;
// See https://www.rfc-editor.org/rfc/rfc8017.html#section-9.2
const SHA256_DER_ENCODING: [u8; SHA256_DER_ENCODING_LENGTH_BYTES] = [
    0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05,
    0x00, 0x04, 0x20,
];
// See https://www.rfc-editor.org/rfc/rfc8017.html#section-9.2
pub(crate) fn emsa_pkcs1v15_encode<Scalar, CS>(msg_hash: &[Boolean]) -> Bitvector<Scalar>
where
    Scalar: PrimeFieldBits,
    CS: ConstraintSystem<Scalar>,
{
    assert_eq!(msg_hash.len(), SHA256_DIGEST_LENGTH_BITS);
    const PADDING_SEQ_LENGTH_BYTES: usize = RSA_MODULUS_LENGTH_BYTES
        - SHA256_DER_ENCODING_LENGTH_BYTES
        - SHA256_DIGEST_LENGTH_BYTES
        - 3;

    // https://www.rfc-editor.org/rfc/rfc8017.html#section-9.2
    // EM = 0x00 || 0x01 || PS || 0x00 || T
    let prefix_bytes = [
        vec![0x00, 0x01],
        vec![0xFF; PADDING_SEQ_LENGTH_BYTES],
        vec![0x00],
        SHA256_DER_ENCODING.to_vec(),
    ]
    .concat();

    let encoded_msg_bits: Vec<Bit<Scalar>> = bytes_to_bits(&prefix_bytes)
        .into_iter()
        .map(Bit::new_value::<CS>)
        .chain(msg_hash.iter().map(|b| Bit {
            bit: b.lc(CS::one(), Scalar::ONE),
            value: b.get_value(),
        }))
        .collect::<Vec<_>>();

    Bitvector::from_bits(encoded_msg_bits)
}
